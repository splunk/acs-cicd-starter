name: Branch Testing

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - '**'
      - '!main'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  acs_endpoint: staging.admin.splunk.com
  json_schema: https://admin.splunk.com/service/info/specs/v2/openapi.json


jobs:
  # 
  # This job checks that the GitHub Secrets have been set correctly and are valid regarding ACS for subsequent jobs to leverage
  #
  validate_stack_and_acs_credentials_configured:
    runs-on: ubuntu-latest
    steps:
      - name: Check STACK_NAME is set as a GitHub Secret
        env:
          stack_name: ${{ secrets.STACK_NAME}}
        run: |
          if [[ "${stack_name}" == "" ]]
          then
            echo "[Error] - The Secret for STACK_NAME is not set in GitHub Secrets"
            exit 1
          fi
      - name: Check STACK_TOKEN is set as a GitHub Secret
        env:
          stack_auth_token: ${{ secrets.STACK_TOKEN}}
        run: |
          if [[ "${stack_auth_token}" == "" ]]
          then
            echo "[Error] - The Secret for STACK_TOKEN is not set in GitHub Secrets"
            exit 1
          fi
  validate_splunkbase_credentials_configured:
    runs-on: ubuntu-latest
    steps:
      - name: Check SPLUNKBASE_USERNAME is set as a GitHub Secret
        env:
          splunkbase_username: ${{ secrets.SPLUNKBASE_USERNAME}}
        run: |
          if [[ "${splunkbase_username}" == "" ]]
          then
            echo "[Error] - The Secret for SPLUNKBASE_USERNAME is not set in GitHub Secrets"
            exit 1
          fi
      - name: Check SPLUNKBASE_PASSWORD is set as a GitHub Secret
        env:
          splunkbase_password: ${{ secrets.SPLUNKBASE_PASSWORD}}
        run: |
          if [[ "${splunkbase_password}" == "" ]]
          then
            echo "[Error] - The Secret for SPLUNKBASE_PASSWORD is not set in GitHub Secrets"
            exit 1
          fi
  #
  #
  #
  authenticate_with_splunk:
    outputs:
      splunkapi_auth_token: ${{ steps.auth-splunk-api.outputs.api_auth_token }}
      splunkbase_auth_token: ${{ steps.authenticate-splunkbase.outputs.auth_token }}
    needs: [validate_splunkbase_credentials_configured,validate_stack_and_acs_credentials_configured]
    runs-on: ubuntu-latest
    steps:
      - name: authenticate with splunkbase
        id: authenticate-splunkbase
        env:
          splunkbase_user: ${{ secrets.SPLUNKBASE_USERNAME}}
          splunkbase_password: ${{ secrets.SPLUNKBASE_PASSWORD}}
        run: |
          splunkbase_token=$(curl -sX POST --form "username=\"${splunkbase_user}\"" --form "password=\"${splunkbase_password}\"" 'https://splunkbase.splunk.com/api/account:login'| sed -ne 's/.*<id>\(.*\)<\/id>/\1/p')
          if [[ ${splunkbase_token} == "" ]]
          then
            echo "token: ${splunkbase_token}"
            exit 1
          else
            #echo ${splunkbase_token} > /tmp/splunkbase_token
            echo "auth_token=$(echo ${splunkbase_token})" >> $GITHUB_OUTPUT
          fi
      - name: Authenticate with splunk API service
        id: auth-splunk-api
        env:
          splunkbase_user: ${{ secrets.SPLUNKBASE_USERNAME}}
          splunkbase_password: ${{ secrets.SPLUNKBASE_PASSWORD}}
        run: |
          splunk_api_session=$(curl -s -k -u ${splunkbase_user}:${splunkbase_password} --url "https://api.splunk.com/2.0/rest/login/splunk")
          if [[ $(echo ${splunk_api_session} | jq ".status_code") -eq 200 ]]
          then 
            echo "[success] - Obtained Auth Token from Splunk API service"
            #echo ${splunk_api_session} | jq ".data.token" | sed 's/\"//g' > /tmp/appInspect_token
            echo "${splunk_api_session}"
          else
            echo "[failed] - Something happened that resulted in a non-200 response"
            echo "${splunk_api_session}"
            exit 1
          fi
          # This base64 encoding is necessary to pass the JWT between jobs
          api_auth_token=$(echo ${splunk_api_session} | jq -r '.data.token'|base64 -w 0)
          echo "${api_auth_token}"
          echo "api_auth_token=${api_auth_token}" >> $GITHUB_OUTPUT
  splunk_appinspect_check:
    runs-on: ubuntu-latest
    needs: authenticate_with_splunk
    steps:
      - name: Check out repo code
        uses: actions/checkout@v3
      - name: Install jq for JSON parsing
        run: sudo apt install -y jq
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            privateApps/**
      - name: Identify Private Apps with Changes in git
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          mkdir -p /tmp/privateApps
          export appsToVet=$(for modifiedFile in ${{ steps.changed-files.outputs.all_modified_files }};do echo ${modifiedFile}|grep "privateApps"| awk -F\/ '{print $2}';done| uniq)
          for app in ${appsToVet} 
          do
            cp -rp privateApps/${app} /tmp/privateApps
          done
          echo "---"
          ls -l /tmp/privateApps
      - name: generate commit hash
        id: commit
        if: ${{ (steps.changed-files.outputs.any_changed == 'true')  }}
        uses: prompt/actions-commit-hash@v2
      - name: Append Commit to App
        if: ${{ (steps.changed-files.outputs.any_changed == 'true') }}
        env:
          commit_short: ${{ steps.commit.outputs.short }}
        run: |
          for appconf in $(find /tmp/privateApps -type f -name app.conf)
          do
            sed -i -e "s/^version[[:space:]]*=[[:space:]]*\(.*\)/version = \1_${commit_short}/g" ${appconf}
            echo "---"
            cat ${appconf}
          done
      - name: Check for local directories
        if: ${{ (steps.changed-files.outputs.any_changed == 'true')  }}
        run: |
          if [[ $(find /tmp/privateApps -type d -name local | wc -l) -gt 0 ]]
          then
            echo "Local Directories Present"
            exit 1
          fi
      - name: Package Apps for validation
        if: ${{ (steps.changed-files.outputs.any_changed == 'true')  }}
        run: |
          mkdir /tmp/privatePackages
          cd /tmp/privateApps
          tar --version
          for app in $(find . -type d -maxdepth 1 | sed 's/[\.\/]+//g'| sed 's/^\.\///g'| tail -n +2)
          do
            # <TO DO> this section still runs even if no apps need packaging for validation, will have to fix that
            COPYFILE_DISABLE=1 tar --format ustar -zcvf /tmp/privatePackages/${app}_$(cat ${app}/default/app.conf| grep version | sed 's/[a-z\=\. ]//g').tgz ${app}
          done
      - name: Run Apps through App Inspect
        if: ${{ (steps.changed-files.outputs.any_changed == 'true')  }}
        env:
          stack: ${{ secrets.STACK_NAME}}
          stack_jwt: ${{ secrets.STACK_TOKEN}}
          appinspect_token: ${{ needs.authenticate_with_splunk.outputs.splunkapi_auth_token }}
        run: |
          appinspect_token=$(echo "${appinspect_token}" | base64 -d)
          mkdir -p /tmp/appinspect_failures
          cd /tmp/privatePackages
          find . -type f
          for candidateApp in $(ls)
          do
            echo "[AppInspect] - ${candidateApp}"
            AppRequest=$(curl -sX POST 'https://appinspect.splunk.com/v1/app/validate' --header "Authorization: Bearer ${appinspect_token}" --header "Cache-Control: no-cache" --form "app_package=@\"${candidateApp}\"" --form 'included_tags="private_app"')
            echo "${AppRequest}"
            # Extract request
            requestURL=$(echo ${AppRequest} |jq ".links[]| select(.rel==\"status\")|.href"| sed 's/\"//g')
            reportURL=$(echo ${AppRequest} |jq ".links[]| select(.rel==\"report\")|.href"| sed 's/\"//g')
            appInspectStatus=$(curl -sX GET "https://appinspect.splunk.com${requestURL}" --header "Authorization: Bearer ${appinspect_token}")
            
            # Loop until request complete or timeout
            LOOPCOUNTER=0
            # 60 iterations of 15 seconds is 15 minutes for timeout
            while [[ $(echo ${appInspectStatus} | jq ".status" | sed 's/\"//g') == "PROCESSING" && ${LOOPCOUNTER} -lt 60 ]]
            do
              sleep 15
              appInspectStatus=$(curl -sX GET "https://appinspect.splunk.com${requestURL}" --header "Authorization: Bearer ${appinspect_token}")
              let LOOPCOUNTER=LOOPCOUNTER+1
            done

            if [[ ${LOOPCOUNTER} -eq 60 ]]
            then
              echo "[ERROR] - Timeout occurred validating ${candidateApp}"
              exit 1
            fi

            if [[ $(echo ${appInspectStatus} | jq ".status" | sed 's/\"//g') == "SUCCESS" ]]
            then
              if [[ $(echo ${appInspectStatus} | jq ".info.error") -eq 0 && $(echo ${appInspectStatus} | jq ".info.failure") -eq 0 && $(echo ${appInspectStatus} | jq ".info.manual_check") -eq 0 ]]
              then
                echo ${appInspectStatus}
              else
                echo "[Error] - App Failed Appinspect, see report for more information (${candidateApp})"
                curl -sX GET "https://appinspect.splunk.com${reportURL}" --header "Authorization: Bearer ${appinspect_token}" > /tmp/appinspect_failures/${candidateApp}.json
                exit 1
              fi
            else
              echo "[Error] - Appinspect went to unknown state while validating ${candidateApp}"
              exit 1
            fi
          done
      - name: 'Upload AppInspect Failures'
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appInspectFailureReports
          path: /tmp/appinspect_failures/
          retention-days: 5
  ip_allow_list_validation:
    strategy:
      matrix:
        whitelist: [search-api,hec,s2s,search-ui]
    #needs: [validate_json,authenticate_with_splunk]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo code
        uses: actions/checkout@v3
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            ipAllow/${{matrix.whitelist}}.json
      - name: create JSON validation content
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        id: create_json_validation_content
        env:
          whitelist: ${{ matrix.whitelist}}
          api_location: ${{ env.json_schema }}
        run: |
          mkdir tmp
          curl -s -o tmp/openapi.json ${api_location}
          echo "validation_file=/ipAllow/${whitelist}.json" >> $GITHUB_OUTPUT
      - name: validate JSON against OpenAPI schema
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        uses: docker://orrosenblatt/validate-json-action:latest
        env:
          INPUT_SCHEMA: /tmp/openapi.json
          INPUT_JSONS: ${{ steps.create_json_validation_content.outputs.validation_file}}
          whitelist: ${{ matrix.whitelist}}
      - name: check entries are valid IP ranges
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          exit 0
      - name: check for 0.0.0.0 and more restrictive rules
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          subnet_count=$(cat ipAllow/${{ matrix.whitelist }}.json| jq -r '.subnets[]' | wc -l)
          all_allow_present=$(cat ipAllow/${{ matrix.whitelist }}.json| jq -r '.subnets[]' | grep -c "0.0.0.0/0")
          if [[ ${subnet_count} -gt 1 && ${all_allow_present} -ge 1 ]]
          then
            echo "[Error] - 0.0.0.0/0 and more restrictive subnets exist, please remove 0.0.0.0/0 if using more restrictive subnets"
            exit 1
          else
            exit 0
          fi
  gather_changed_indexes:
    runs-on: ubuntu-latest
    outputs:
      matrix:"{\"index\":${{ steps.changed-files.outputs.all_changed_files }}}"
    steps:
      - name: Install jq for JSON parsing
        run: sudo apt install -y jq
      - name: Check out repo code
        uses: actions/checkout@v3
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            indexes/*.json
  validate_changed_indexes:
    strategy:
      matrix: ${{ needs.gather_changed_indexes.outputs.matrix }}
    runs-on: ubuntu-latest
    needs: gather_changed_indexes
    steps:
      - name: test
        run: |
          echo "${{ matrix.index }}"